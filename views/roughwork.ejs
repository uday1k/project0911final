const deptPromise=Promise((resolve,reject)=>{
    console.log("hello 11");
    dbo.collection("Department").find({}).toArray(function(err, result1) {
      if(err){
        reject(err);
      }
      else{
        resolve(result1);
      }
       
    });

  });


  const deptPromise=new Promise((resolve,reject)=>{
    console.log("hello 11");
    dbo.collection("Department").find({}).toArray(function(err, result1) {
      if(err){
        reject(err);
      }
      else{
        resolve(result1);
      }
       
    });

  });


  const randomNumber = new Promise(function(resolve,reject){

});





var ch=1;
  async function fna(){
    await setTimeout(function(){ch=2},4000);
    await setTimeout(function(){ch=3},1000);
    res.render("index is"+ch);
  }
  

  var deptData=await 


  //Promise.all([empPromise, deptPromise]).then(function (employDeptData) {
  
    //employInfo.employ = employDeptData[0];
    //employInfo.dept = employDeptData[1];
    //console.log(employInfo);
    //res.render("formpage", employInfo);
  //});



  <div class="user-panel mt-3 pb-3 mb-3 d-flex">
    <div class="image">
      <img src="../../dist/img/user2-160x160.jpg" class="img-circle elevation-2" alt="User Image">
    </div>
    <div class="info">
      <a href="#" class="d-block"><%=nameofuser%></a>
    </div>
  </div>


  <nav class="navbar navbar-light bg-light float-sm-right">
    <a class="navbar-brand" href="#">
      <img src="../../dist/img/user2-160x160.jpg" width="30" height="30" class="d-inline-block align-top" alt="">
      <%=nameofuser%>
    </a>
  </nav>


  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1>DataTables</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a style="float: right;" href="/logout" class="btn btn-primary">Logout</a></li>
        </ol>
      </div>



      <!-- Content Header (Page header) -->
    <section class="content-header">
      <div class="container-fluid">
        <div class="row mb-2">
          <div class="col-sm-6">
            <h1>DataTables</h1>
          </div>
          <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
              <li class="breadcrumb-item"><a style="float: right;" href="/logout" class="btn btn-primary">Logout</a></li>
            </ol>
          </div>
        </div>
      
    </section>




    // $.validator.setDefaults({
      //   submitHandler: function () {
      //     alert( "Form successful submitted!" );
      //   }
      // });


    //////
    
    

<body class="hold-transition sidebar-mini">



<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="#">
    <img src="../../dist/img/user2-160x160.jpg" width="30" height="30" class="d-inline-block align-top img-circle"
      alt="">
    <%=nameofuser%>
  </a>


  <div class="collapse navbar-collapse" id="navbarText">

    <ul class="navbar-nav mr-auto">
      
    </ul>

    <span>
      <a style="float: right;" href="/logout" class="btn btn-primary">Logout</a>
    </span>
  </div>
</nav>



<div class="row">
  <div class="col-12">
    <div class="card">
      <div class="card-header">
        <h1 class="card-title">DataTable</h1>
      </div>
      <!-- /.card-header -->
      <div class="card-body">
        <table id="example2" class="table table-bordered table-hover">
          <thead>
            <tr>
              <th>Employee Name</th>
              <th>Employee ID</th>
              <th>Role</th>
              <th>Salary</th>
              <th>Report to</th>
              <th>Department</th>
              <th>Name of Emp Deleted</th>
              <th>Date/time of Deleted</th>
              <th>Options</th>
            </tr>
          </thead>
          <tbody>
            <%for (var i=0; i <tname.length; i++ ){%>

              <tr>
                <td>
                  <%=tname[i].nam%>
                </td>
                <td>
                  <%=tname[i].id%>
                </td>
                <td>
                  <%=tname[i].role%>
                </td>
                <td>
                  <%=tname[i].sal%>
                </td>
                <td>
                  <%=tname[i].rep%>
                </td>
                <td>
                  <%=tname[i].dep%>
                </td>
                <td>
                  <%=tname[i].usernameOfEmpDeleted%>
                </td>
                <td>
                  <%=tname[i].DateTime%>
                </td>
                <td><a class="btn btn-primary" href="/permanentdel/<%=tname[i]._id%>">Permanent Delete</a> <a
                    class="btn btn-primary" href="/restore/<%=tname[i]._id%>">Restore</a></td>
              </tr>

              <% } %>
          </tbody>
          <tfoot>
            <tr>
              <th>Employee Name</th>
              <th>Employee ID</th>
              <th>Role</th>
              <th>Salary</th>
              <th>Report to</th>
              <th>Department</th>
              <th>Name of Emp Deleted</th>
              <th>Date/time of Deleted</th>
              <th>Options</th>
            </tr>
          </tfoot>
        </table>
        <a class="btn btn-primary" href="/edit">Add New Row</a>
      </div>
      <!-- /.card-body -->
    </div>
    <!-- /.card -->


    <!-- /.card -->
  </div>
  <!-- /.col -->
</div>
<!-- /.row -->
</div>

<div id='myDiv1'><!-- Plotly chart will be drawn inside this DIV --></div>

<%- include('partials/footscript.ejs') %>



<script>
  const myArrayValues = "<%=dcbv%>".split(",");
  let dataValues=myArrayValues.map(function(value){
    return parseInt(value);
  })
  console.log(dataValues)
  const myArrayNames = "<%=dcbn%>".split(",");
  
  
  var data = [{
  values: dataValues,
  labels: myArrayNames,
  type: 'pie'
}];

var layout = {
  height: 400,
  width: 500
};

Plotly.newPlot('myDiv1', data, layout);

</script>
<script>


  $(function () {
    $("#example1").DataTable({
      "responsive": true, "lengthChange": false, "autoWidth": false,
      "buttons": ["copy", "csv", "excel", "pdf", "print", "colvis"]
    }).buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');
    $('#example2').DataTable({
      "paging": true,
      "lengthChange": false,
      "searching": false,
      "ordering": true,
      "info": true,
      "autoWidth": false,
      "responsive": true,
    });
  });
</script>
</body>




<!-- Content Wrapper. Contains page content -->
  
    <!-- Content Header (Page header) -->
    <section class="content-header">
      <div class="container-fluid">
        <div class="row mb-2">
          <div class="col-sm-6">
            <h1>Validation</h1>
          </div>
          <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
              <li class="breadcrumb-item"><a href="#">Home</a></li>
              <li class="breadcrumb-item active">Validation</li>
            </ol>
          </div>
        </div>
      </div><!-- /.container-fluid -->
    </section>




    <!--Carousel Wrapper-->
<div id="multi-item-example" class="carousel slide carousel-multi-item" data-ride="carousel">

  <!--Controls-->
  <div class="controls-top">
    <a class="btn-floating" href="#multi-item-example" data-slide="prev"><i class="fas fa-chevron-left"></i></a>
    <a class="btn-floating" href="#multi-item-example" data-slide="next"><i
        class="fas fa-chevron-right"></i></a>
  </div>
  <!--/.Controls-->

  <!--Indicators-->
  <ol class="carousel-indicators">
    <li data-target="#multi-item-example" data-slide-to="0" class="active"></li>
    <li data-target="#multi-item-example" data-slide-to="1"></li>
    
  </ol>
  <!--/.Indicators-->

  <!--Slides-->
  <div class="carousel-inner" role="listbox">

    <!--First slide-->
    <div class="carousel-item active">

      <div class="col-md-3" style="float:left">
       <div class="card mb-2">
          <img class="card-img-top"
            src="https://mdbootstrap.com/img/Photos/Horizontal/City/4-col/img%20(60).jpg" alt="Card image cap">
          <div class="card-body">
            <h4 class="card-title">Card title</h4>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the
              card's content.</p>
            <a class="btn btn-primary">Button</a>
          </div>
        </div>
      </div>

      <div class="col-md-3" style="float:left">
        <div class="card mb-2">
          <img class="card-img-top"
            src="https://mdbootstrap.com/img/Photos/Horizontal/City/4-col/img%20(60).jpg" alt="Card image cap">
          <div class="card-body">
            <h4 class="card-title">Card title</h4>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the
              card's content.</p>
            <a class="btn btn-primary">Button</a>
          </div>
        </div>
      </div>

      <div class="col-md-3" style="float:left">
        <div class="card mb-2">
          <img class="card-img-top"
            src="https://mdbootstrap.com/img/Photos/Horizontal/City/4-col/img%20(60).jpg" alt="Card image cap">
          <div class="card-body">
            <h4 class="card-title">Card title</h4>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the
              card's content.</p>
            <a class="btn btn-primary">Button</a>
          </div>
        </div>
      </div>
      
       <div class="col-md-3" style="float:left">
       <div class="card mb-2">
          <img class="card-img-top"
            src="https://mdbootstrap.com/img/Photos/Horizontal/City/4-col/img%20(60).jpg" alt="Card image cap">
          <div class="card-body">
            <h4 class="card-title">Card title</h4>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the
              card's content.</p>
            <a class="btn btn-primary">Button</a>
          </div>
        </div>
      </div>

    </div>
    <!--/.First slide-->

    <!--Second slide-->
    <div class="carousel-item">

      <div class="col-md-3" style="float:left">
        <div class="card mb-2">
          <img class="card-img-top"
            src="https://mdbootstrap.com/img/Photos/Horizontal/City/4-col/img%20(60).jpg" alt="Card image cap">
          <div class="card-body">
            <h4 class="card-title">Card title</h4>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the
              card's content.</p>
            <a class="btn btn-primary">Button</a>
          </div>
        </div>
      </div>

      <div class="col-md-3" style="float:left">
        <div class="card mb-2">
          <img class="card-img-top"
            src="https://mdbootstrap.com/img/Photos/Horizontal/City/4-col/img%20(47).jpg" alt="Card image cap">
          <div class="card-body">
            <h4 class="card-title">Card title</h4>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the
              card's content.</p>
            <a class="btn btn-primary">Button</a>
          </div>
        </div>
      </div>

      <div class="col-md-3" style="float:left">
        <div class="card mb-2">
          <img class="card-img-top"
            src="https://mdbootstrap.com/img/Photos/Horizontal/City/4-col/img%20(48).jpg" alt="Card image cap">
          <div class="card-body">
            <h4 class="card-title">Card title</h4>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the
              card's content.</p>
            <a class="btn btn-primary">Button</a>
          </div>
        </div>
      </div>
      
      <div class="col-md-3" style="float:left">
        <div class="card mb-2">
          <img class="card-img-top"
            src="https://mdbootstrap.com/img/Photos/Horizontal/City/4-col/img%20(47).jpg" alt="Card image cap">
          <div class="card-body">
            <h4 class="card-title">Card title</h4>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the
              card's content.</p>
            <a class="btn btn-primary">Button</a>
          </div>
        </div>
      </div>

    </div>
    <!--/.Second slide-->

   

  </div>
  <!--/.Slides-->

</div>
<!--/.Carousel Wrapper-->




<div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
  <ol class="carousel-indicators">
      <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
      <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
      <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
  </ol>
  <div class="carousel-inner">
      <div class="carousel-item active">
          <div class="card" style="width: 18rem;">
              <div class="card-body">
                  <h5 class="card-title">Special title treatment</h5>
                  <p class="card-text">With supporting text below as a natural lead-in to additional
                      content.
                  </p>
                  <a href="#" class="btn btn-primary">Go somewhere</a>
              </div>
          </div>
      </div>
      <div class="carousel-item">
          <div class="card-body">
              <h5 class="card-title">Special title treatment</h5>
              <p class="card-text">With supporting text below as a natural lead-in to additional content.
              </p>
              <a href="#" class="btn btn-primary">Go somewhere</a>
          </div>
      </div>
      <div class="carousel-item">
          <div class="card-body">
              <h5 class="card-title">Special title treatment</h5>
              <p class="card-text">With supporting text below as a natural lead-in to additional content.
              </p>
              <a href="#" class="btn btn-primary">Go somewhere</a>
          </div>
      </div>
  </div>
  <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
      <span class="carousel-control-prev-icon bg-primary" aria-hidden="true"></span>
      <span class="sr-only">Previous</span>
  </a>
  <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
      <span class="carousel-control-next-icon bg-primary" aria-hidden="true"></span>
      <span class="sr-only">Next</span>
  </a>
</div>








<!-- Content Header (Page header) -->
<section class="content-header">
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">
      <img src="../../dist/img/user2-160x160.jpg" width="30" height="30" class="d-inline-block align-top img-circle" alt="">
      <%=nameofuser%>
    </a>
    
    
    <div class="collapse navbar-collapse" id="navbarText">
      
      <ul class="navbar-nav mr-auto">
      
      </ul>
      
      <span>
        <a style="float: right;" href="/logout" class="btn btn-primary">Logout</a>
      </span>
    </div>
  </nav>
  
</section>




if (req.body.empmongoid) {


  function saveUpdtFunc() {
    const updtDetails = new Promise(function (resolve, reject) {
      var myquery = { "_id": ObjectId(req.body.empmongoid) };
      var newvalues = { $set: { nam: req.body.empname, id: req.body.empid, role: req.body.emprol, sal: req.body.empsal, rep: req.body.emprep, dep: req.body.empdep } };
      dbo.collection("employ").updateOne(myquery, newvalues, function (err, res1) {
        if (err) {
          reject(err);
        }
        else {
          resolve(res1)
        }
      });
    });
    return updtDetails;
  }


  async function asSaveUpdtFunc() {
    var chUpdtRes = await saveUpdtFunc();


    var updatedBy = { "usernam": req.session.usernam, "DateTime": new Date().toLocaleString(), "type": "edited", "idOfEffectedRow": ObjectId(req.body.empmongoid) }
    dbo.collection("CreateEditDetails").insertOne(updatedBy, function (err, resultOfUpdatedBy) {
      if (err) throw err;
      console.log(resultOfUpdatedBy);
      console.log(chUpdtRes);
      res.redirect("/table");
    })


  }

  asSaveUpdtFunc();

}
else {

  function saveInsFunc() {
    const insertEmp = new Promise(function (resolve, reject) {
      myobj2 = { nam: req.body.empname, id: req.body.empid, role: req.body.emprol, sal: req.body.empsal, rep: req.body.emprep, dep: req.body.empdep };
      dbo.collection("employ").insertOne(myobj2, function (err, res1) {
        if (err) {
          reject(err);
        }
        else {

          resolve(res1);
        }

      });

    })
    return insertEmp;
  }



  async function asSaveIns() {
    var chInsrtRes = await saveInsFunc();
    var createdBy = { "usernam": req.session.usernam, "DateTime": new Date().toLocaleString(), "type": "created", "idOfEffectedRow": chInsrtRes["insertedId"] }
    dbo.collection("CreateEditDetails").insertOne(createdBy, function (err, resultOfCreatedBy) {
      if (err) throw err;
      console.log(resultOfCreatedBy);
      console.log(chInsrtRes);
      res.redirect("/table");
    });

  }
  asSaveIns();

}





<div class="form-group">
  <input type="hidden" name="empmongoid" class="form-control" id="exmongoid" value="<%=employ._id%>">
</div>




   
    




<div class="form-group">
  <label for="idrole">Job Role</label>
  <select name="jobrole" id="idrole">
    <% for(var i=0;i<typesOfRoles.length;i++){%>
      <option value="<%=typesOfRoles[i].roleName%>"><%=typesOfRoles[i].roleName%></option>
      <%}%>
  </select>
</div>


jQuery.validator.addMethod("notselectedoption", function (value, element) {
  return this.optional(element) || value=="not selected";
}, 'Please select by clicking dropdown.');




 <!-- jQuery -->
 <script src="../../plugins/jquery/jquery.min.js"></script>
 <!-- Bootstrap 4 -->
 <script src="../../plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
 <!-- jquery-validation -->
 <script src="../../plugins/jquery-validation/jquery.validate.min.js"></script>
 <script src="../../plugins/jquery-validation/additional-methods.min.js"></script>



 <select multiple data-style="bg-white rounded-pill px-4 py-3 shadow-sm " class="selectpicker w-100">
  <option>United Kingdom</option>
  <option>United States</option>
  <option>France</option>
  <option>Germany</option>
  <option>Italy</option>
</select><!-- End -->



jQuery.validator.addMethod("multiselectedoption", function (value, element) {
  console.log(value)
  return this.optional(element) || value.length!=0;
}, 'Please select atleast one option.');


<li class="nav-item">
  <a class="nav-link disabled" href="#">Disabled</a>
</li>




// var dbo =  new Promise(function(resolve,reject){
  
  //   let MongoClient = require('mongodb').MongoClient;
  //   let url = "mongodb://localhost:27017/";
  //   MongoClient.connect(url, function (err, db) {
  //     if (err) reject(err);
  //     let dbo = db.db("onlinejob");
  //     resolve(dbo);
  //   });
    
  // })



  <li class="nav-item dropdown">
    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Dropdown
    </a>
    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
        <a class="dropdown-item" href="#">Action</a>
        <a class="dropdown-item" href="#">Another action</a>
        <div class="dropdown-divider"></div>
        <a class="dropdown-item" href="#">Something else here</a>
    </div>
</li>


<li class="nav-item">
  <a class="nav-link btn btn-info mr-1"  href="#">Login</a>
</li>
<li class="nav-item">
<a class="nav-link btn btn-info mr-1" href="#">Register</a>
</li>


<div class="dropdown">
  <button class="btn btn-secondary dropdown-toggle mr-5" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
    Login/Signup
  </button>
  <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
    <a class="dropdown-item" href="#">Login</a>
    <a class="dropdown-item" href="#">Register</a>
    <a class="dropdown-item" href="/company/register">Register as Company</a>
  </div>
</div>



<form action="company/register/accepted/<%=companyList[i]._id" method="post"><input type="submit" class="dropdown-item"></form>
                                  <a class="dropdown-item" href="company/register/accepted/<%=companyList[i]._id%>">Accept</a>
                                  <a class="dropdown-item" href="company/register/reject/<%=companyList[i]._id%>">Reject</a>
                                </div>



                                <a class="dropdown-item" href="company/register/accepted/<%=companyList[i]._id%>">Accept</a>
                                  <a class="dropdown-item" href="company/register/reject/<%=companyList[i]._id%>">Reject</a>



                                  <div class="card-header">
                                    <h3 class="card-title">Login<small>!</small></h3>
                                  </div>
                                  <!-- /.card-header -->



                                  app.get('/register', function (req, res) {
                                    res.render("regis", { "checkUsername": "" });
                                  })
                                  
                                  app.post('/register', function (req, res) {
                                  
                                    function regisFunc() {
                                  
                                  
                                      myobj1 = { usernam: req.body.name, pwd: req.body.password, emailofemploy: req.body.email1 };
                                  
                                      const credInsert = new Promise(function (resolve, reject) {
                                        dbo.collection("credentials").findOne({ $or: [{ emailofemploy: req.body.email1 }, { usernam: req.body.name }] }, function (err, result) {
                                          if (err) {
                                            reject(err);
                                          }
                                          else {
                                            resolve(result);
                                          }
                                        });
                                  
                                      });
                                      return credInsert
                                    }
                                  
                                    async function asRegisFunc() {
                                      var checkRes = await regisFunc();
                                  
                                  
                                      if (checkRes) {
                                        res.render("regis", { "checkUsername": "Username or Emailid already exists" });
                                      }
                                      else {
                                  
                                        await bcrypt.hash(myobj1.pwd, saltRounds).then(function (hash) {
                                          myobj1.pwd = hash;
                                        });
                                        x = Math.floor((Math.random() * 1000000) + 1);
                                  
                                        var mailOptions = {
                                          from: 'kommineniuday449@gmail.com',
                                          to: req.body.email1,
                                          subject: 'Otp to Register',
                                          text: 'Your OTP is ' + x
                                        };
                                  
                                        transporter.sendMail(mailOptions, function (error, info) {
                                          if (error) {
                                            console.log(error);
                                          } else {
                                            console.log('Email sent: ' + info.response);
                                            res.render("emailcheck", { "checkOtp": "" });
                                          }
                                        });
                                      }
                                  
                                    }
                                  
                                    asRegisFunc();
                                  
                                  })
                                  


                                  <%else if(locals.role==="company"){%>
            
                                    <%}%>
                                    <%else{%>
                                      <li class="nav-item">
                                        <a class="nav-link btn btn-light"  href="#">Post Job</a>
                                      </li>
                                      <li class="nav-item">
                                        <a class="nav-link btn btn-light"  href="/logout">logout</a>
                                      </li>
                                      <%}%>      



                                      btn btn-outline-primary








                             
app.get('/edit', function (req, res) {

  let jobDetails = {};



  const skillsTypes = new Promise(function (resolve, reject) {
    dbo.collection("skillsTypes").find({}).toArray(function (err, skillTypes) {
      if (err) reject(err);
      else resolve(skillTypes);
    })

  })
  const roleTypes = new Promise(function (resolve, reject) {
    dbo.collection("roleTypes").find({}).toArray(function (err, roleTypes) {
      if (err) reject(err);
      else resolve(roleTypes);
    })

  })
  const deptTypes = new Promise(function (resolve, reject) {
    dbo.collection("departmentTypes").find({}).toArray(function (err, deptTypes) {
      if (err) reject(err);
      else resolve(deptTypes);
    })

  })
  const quals = new Promise(function (resolve, reject) {
    dbo.collection("Qualifications").find({}).toArray(function (err, qualsres) {
      if (err) reject(err);
      else resolve(qualsres);
    })
  })
  
  async function asFuncEnterJobDetails() {
    [jobDetails.typesOfSkills, jobDetails.typesOfRoles, jobDetails.typesOfDepts,jobDetails.quals] = await Promise.all([skillsTypes, roleTypes, deptTypes,quals])
    res.render('formpage', jobDetails);
  }
  asFuncEnterJobDetails();


})



app.post('/savejob', function (req, res) {
  let insertJobDetails={};
  insertJobDetails.deptType=req.body.jobdept;
  insertJobDetails.roleType=req.body.jobrole;
  insertJobDetails.qualificationRequired=req.body.jobqual;
  insertJobDetails.jobDescription=req.body.jobdes;
  insertJobDetails.skillsRequired=req.body.jobskillsrequired;
  insertJobDetails.experience=req.body.jobexp;
  insertJobDetails.lastDateTimeToApply=new Date(req.body.jobdatetime).toLocaleString();
  insertJobDetails.ctcOffered=req.body.jobctc;
  insertJobDetails.postedDateTime=new Date().toLocaleString();
  //console.log(insertJobDetails)
  async function asFuncInsertJobDetails(){
    await dbo.collection("jobsDetails").insertOne(insertJobDetails,function(err,resultToCheckDetailsInserted){
      if(err) throw err;
      console.log(resultToCheckDetailsInserted)
      res.redirect("/admin");
    })
  }
  asFuncInsertJobDetails();
  
})






app.get('/delete/:idofemp', checkAuth, function (req, res) {
  var idparam = req.params.idofemp;

  function deleteDataFindFunc() {

    const dataOfDeletedRow = new Promise(function (resolve, reject) {
      dbo.collection("employ").findOne({ "_id": ObjectId(idparam) }, function (err1, deletedEmpDetails) {
        if (err1) {
          reject(err1);
        }
        else {
          resolve(deletedEmpDetails);
        }

      });
    });
    return dataOfDeletedRow;

  }

  function deleteEmpFunc(deletedData) {

    const deleteEmp = new Promise(function (resolve, reject) {

      dbo.collection("employ").deleteOne({ "_id": ObjectId(idparam) }, function (err, obj) {
        if (err) {
          reject(err);
        }
        else {


          var deletedByDetails = { "usernameOfEmpDeleted": req.session.usernam, "DateTime": new Date().toLocaleString() }
          let allDelDataDetails = Object.assign(deletedData, deletedByDetails);
          dbo.collection("DeletedData").insertOne(allDelDataDetails, function (err, insRes) {
            console.log("1 document deleted");
            resolve(obj);

          })
        }


      })




    })
    return deleteEmp;

  }

  async function asDeleteFunc() {
    if (idparam) {

      var findDeletedData = await deleteDataFindFunc();
      var deleteEmpData = await deleteEmpFunc(findDeletedData);
      //dataOfDeletedRow.then(function (deletedData) {});
      res.redirect("/table");

    }
    else {
      res.redirect("/table");
    }

  }
  asDeleteFunc();


})




app.get('/table', checkAuth, function (req, res) {


  function tableDataFunc() {
    const tabData = new Promise(function (resolve, reject) {
      dbo.collection("employ").find({}).toArray(function (err, result) {
        if (err) {
          reject(err);
        }
        else {
          resolve(result);
        }


      })

    });
    return tabData;
  }
  async function asTableDataFunc() {
    var chTabdata = await tableDataFunc();

    tabobj["tname"] = chTabdata;

    res.render("data2ass2", tabobj);


  }
  asTableDataFunc();




})




